services:
  backend:
    build:
      context: ./backend
    container_name: horizon_backend
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.dev

  nginx:
    image: nginx:1.25
    container_name: horizon_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - backend
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 10s
      timeout: 3s
      retries: 3


  frontend:
    build:
      context: ./frontend
    container_name: horizon_frontend
    command: yarn dev
    volumes:
      - ./frontend:/app
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
    depends_on:
      - backend

  db:
    image: postgres:16
    container_name: horizon_db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 3s
      retries: 5

  redis:
    image: redis:7
    container_name: horizon_redis
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5


volumes:
  postgres_data:
  static_volume:
  media_volume:
